#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import random
import datetime
import warnings

import pandas as pd
from fpdf import FPDF

# üîá –ì–ª—É—à–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è fpdf2, —á—Ç–æ–±—ã –∫–æ–Ω—Å–æ–ª—å –Ω–µ –∑–∞—Å–æ—Ä—è–ª–∞—Å—å
warnings.filterwarnings("ignore", category=DeprecationWarning, module="fpdf")
warnings.filterwarnings("ignore", category=UserWarning, module="fpdf")

# –ü–∞–ø–∫–∞ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ (–∫–∞—Ä—Ç–∏–Ω–∫–∏/—à—Ä–∏—Ñ—Ç—ã). –ï—Å–ª–∏ –≤—Å—ë –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å main.py ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ '.'
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

IMG_FLUCK      = os.path.join(BASE_DIR, "fluck.png")
IMG_BLUE_LINE  = os.path.join(BASE_DIR, "blue_line.png")
IMG_FL         = os.path.join(BASE_DIR, "fl.png")

FONT_ARIAL      = os.path.join(BASE_DIR, "Arial.ttf")
FONT_ARIAL_B    = os.path.join(BASE_DIR, "Arial-Bold.ttf")
FONT_ARIAL_I    = os.path.join(BASE_DIR, "Arial-Italic.ttf")
FONT_ARIAL_BI   = os.path.join(BASE_DIR, "Arial-BoldItalic.ttf")


class PDF(FPDF):
    def __init__(self, filename, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.filename = filename.replace('.xlsx', '.flw')
        self.show_headers = True

    def header(self):
        # –õ–æ–≥–æ—Ç–∏–ø
        if os.path.exists(IMG_FLUCK):
            self.image(IMG_FLUCK, 0, 4, 206)

        # –®—Ä–∏—Ñ—Ç—ã
        # –ü–∞—Ä–∞–º–µ—Ç—Ä uni –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö fpdf2
        self.add_font('Arial',  '',  FONT_ARIAL)
        self.add_font('Arial',  'B', FONT_ARIAL_B)
        self.add_font('Arial',  'I', FONT_ARIAL_I)
        self.add_font('Arial',  'BI', FONT_ARIAL_BI)

        self.set_font('Arial', 'B', 6.8)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥ set_stretching (–≤–¥—Ä—É–≥ –≤ –≤–µ—Ä—Å–∏–∏ PyFPDF) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
        try:
            self.set_stretching(95.0)
        except AttributeError:
            pass

        if self.show_headers:
            self.ln(16)
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ln/txt —Ä–∞–¥–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–π –≤–µ—Ä—Å—Ç–∫–∏
            self.cell(36, 4, 'Cable ID',    0, 0, 'L')
            self.cell(33, 4, 'Summary',     0, 0, 'L')
            self.cell(28, 4, 'Test Limit',  0, 0, 'L')
            self.cell(30, 4, 'Length',      0, 0, 'L')
            self.cell(32, 4, 'Headroom',    0, 0, 'L')
            self.cell(30, 4, 'Date / Time', 0, 0, 'L')
            self.ln(3.8)

    def footer(self):
        self.set_y(-28.5)

        if os.path.exists(IMG_BLUE_LINE):
            self.image(IMG_BLUE_LINE, 6, 264, 195)
        if os.path.exists(IMG_FL):
            self.image(IMG_FL, 145, 270, 50)

        self.set_font('Arial', 'B', 9)
        self.set_x(6)
        current_date = datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S %p')
        self.cell(90, 8, current_date)
        self.cell(0,  8, f'Page {self.page_no()}', 0, 0, 'L')
        self.ln(4)
        self.set_x(6)
        self.cell(30, 8, self.filename)


def generate_pdf(filepath, start_date, start_time):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∏–∑ Excel –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å—Ç–∫–∏.
    """
    df = pd.read_excel(filepath, engine='openpyxl')

    pdf = PDF(filename=os.path.basename(filepath))
    pdf.add_page()
    pdf.set_font('Arial', '', 6.8)

    # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ set_stretching –µ—Å—Ç—å ‚Äî –ø—Ä–∏–º–µ–Ω–∏–º, –∫–∞–∫ –±—ã–ª–æ –≤ –≤–µ–±-–≤–µ—Ä—Å–∏–∏
    try:
        pdf.set_stretching(95.0)
    except AttributeError:
        pass

    h = 2.8

    current_time = datetime.datetime.strptime(f"{start_date} {start_time}", "%Y-%m-%d %H:%M")

    for _, row in df.iterrows():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if pdf.get_y() > 260:
            pdf.add_page()

        pdf.cell(36, h, txt=str(row[0]))
        pdf.cell(33, h, txt=str(row[1]))
        pdf.cell(28, h, txt=str(row[2]))
        pdf.cell(30, h, txt=str(row[3]) + ' m')
        pdf.cell(32, h, txt=f'{random.randrange(100, 250, 1)/10:.2f} dB (NEXT)')
        pdf.cell(30, h, txt=current_time.strftime("%d/%m/%Y %H:%M"), ln=True)

        current_time += datetime.timedelta(seconds=random.randint(45, 245))

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    total_length       = round(df['Length'].sum(), 2) if 'Length'  in df.columns else 0
    total_reports      = len(df)
    passing_reports    = df[df['Summary'] == 'PASS'].shape[0]          if 'Summary' in df.columns else 0
    failing_reports    = df[df['Summary'] == 'FAIL'].shape[0]          if 'Summary' in df.columns else 0
    warning_reports    = df[df['Summary'] == 'WARNING'].shape[0]       if 'Summary' in df.columns else 0
    documentation_only = df[df['Summary'] == 'DOCUMENTATION ONLY'].shape[0] if 'Summary' in df.columns else 0

    pdf.show_headers = False
    pdf.add_page()
    pdf.set_y(26)
    pdf.set_x(6)
    pdf.set_font('Arial', '', 9)

    # –õ–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
    pdf.cell(0, 3.3, 'Total Length:',              0, 1, 'L'); pdf.set_x(6)
    pdf.cell(0, 3.3, 'Number of Reports:',         0, 1, 'L'); pdf.set_x(6)
    pdf.cell(0, 3.3, 'Number of Passing Reports:', 0, 1, 'L'); pdf.set_x(6)
    pdf.cell(0, 3.3, 'Number of Failing Reports:', 0, 1, 'L'); pdf.set_x(6)
    pdf.cell(0, 3.3, 'Number of Warning Reports:', 0, 1, 'L'); pdf.set_x(6)
    pdf.cell(0, 3.3, 'Documentation Only:',        0, 1, 'L')

    # –ü—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü (–∑–Ω–∞—á–µ–Ω–∏—è)
    pdf.set_y(26)
    pdf.cell(60, 3.3, f'{total_length} m',      0, 1, 'R')
    pdf.cell(60, 3.3, f'{total_reports}',       0, 1, 'R')
    pdf.cell(60, 3.3, f'{passing_reports}',     0, 1, 'R')
    pdf.cell(60, 3.3, f'{failing_reports}',     0, 1, 'R')
    pdf.cell(60, 3.3, f'{warning_reports}',     0, 1, 'R')
    pdf.cell(60, 3.3, f'{documentation_only}',  0, 1, 'R')

    output_path = filepath.replace('.xlsx', '.pdf')
    pdf.output(output_path)
    return output_path


def main():
    # –ü—Ä–æ—Å—Ç–æ–π CLI: —Å–ø—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    excel_path = input("–ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É (*.xlsx): ").strip().strip('"').strip("'")
    if not excel_path:
        print("–§–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω.")
        return
    if not os.path.exists(excel_path):
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    start_date = input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD): ").strip() or datetime.date.today().isoformat()
    start_time = input("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (HH:MM): ").strip() or "08:00"

    try:
        out_pdf = generate_pdf(excel_path, start_date, start_time)
        print(f"–ì–æ—Ç–æ–≤–æ! PDF: {out_pdf}")
    except Exception as e:
        print("–û—à–∏–±–∫–∞:", e)


if __name__ == "__main__":
    main()
